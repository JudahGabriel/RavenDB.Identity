using Raven.Client.Documents;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Text;

namespace Raven.Identity
{
    /// <summary>
    /// Contains constants and methods that deal with the conventions of RavenDB.Identity.
    /// </summary>
    public static class Conventions
    {
        /// <summary>
        /// The prefix used for compare/exchange values used by RavenDB.Identity to ensure user uniqueness based on email address.
        /// </summary>
        public const string EmailReservationKeyPrefix = "emails/";

        /// <summary>
        /// Gets the compare/exchange key used to store the specified email address.
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        public static string CompareExchangeKeyFor(string email)
        {
            return EmailReservationKeyPrefix + email.ToLowerInvariant();
        }

        /// <summary>
        /// Gets the collection name of the specified user type.
        /// </summary>
        /// <typeparam name="TUser"></typeparam>
        /// <param name="db"></param>
        /// <returns>Something like "AppUsers"</returns>
        public static string CollectionNameFor<TUser>(IDocumentStore db)
        {
            var entityName = db.Conventions.GetCollectionName(typeof(TUser));
            return db.Conventions.TransformTypeCollectionNameToDocumentIdPrefix(entityName);
        }

        /// <summary>
        /// Gets the collection name with separator for the specified type.
        /// </summary>
        /// <typeparam name="TUser"></typeparam>
        /// <param name="db"></param>
        /// <returns>Something like "AppUsers/"</returns>
        public static string CollectionNameWithSeparator<TUser>(IDocumentStore db)
        {
            return CollectionNameFor<TUser>(db) + db.Conventions.IdentityPartsSeparator;
        }

        /// <summary>
        /// Creates a user ID based on the ID type.
        /// </summary>
        /// <typeparam name="TUser">The type of user.</typeparam>
        /// <param name="user">The user to create the ID for.</param>
        /// <param name="idType">The type of the ID to create.</param>
        /// <param name="db">The Raven document store.</param>
        /// <returns>An initial string ID. Depending on the <paramref name="idType"/>, this may be null or a partial ID that gets assigned by the database upon storing the user.</returns>
        public static string? UserIdFor<TUser>(TUser user, UserIdType idType, IDocumentStore db)
            where TUser : IdentityUser
        {
            // Raven has special handling for consecutive IDs (AppUsers/1)
            if (idType == UserIdType.Consecutive)
            {
                return CollectionNameFor<TUser>(db) + "|"; // pipe character convention: https://ravendb.net/docs/article-page/4.2/csharp/client-api/document-identifiers/working-with-document-identifiers#identities
            }

            // Raven has special handling for number-tag IDs (AppUsers/1-a)
            if (idType == UserIdType.NumberTag)
            {
                return null; // null ID for autogenerated IDs: https://ravendb.net/docs/article-page/4.2/csharp/client-api/document-identifiers/working-with-document-identifiers#autogenerated-ids
            }

            // If UserIdType is none, that means we use whatever the user has specified for User.Id
            if (idType == UserIdType.None)
            {
                return user.Id;
            }

            var userIdPart = idType switch
            {
                UserIdType.Email => user.Email,
                UserIdType.UserName => user.UserName,
                _ => string.Empty // everything else uses empty or has already been handled above.
            };
            return UserIdWithSuffix<TUser>(userIdPart, db);
        }

        /// <summary>
        /// Creates a user ID using the Raven collection name of the specified <typeparamref name="TUser"/> and configured identity parts separator.
        /// Typically, this will return a value like "AppUsers/foo", where foo is the specified <paramref name="suffix"/>.
        /// </summary>
        /// <typeparam name="TUser">The type of user.</typeparam>
        /// <param name="suffix">The suffix to append to the ID.</param>
        /// <param name="db">The Raven database. Used for determining the identity parts separator and collection name.</param>
        /// <returns>A user ID generated using the collection name of the <typeparamref name="TUser"/>, the database's configured identity parts separator, and specified suffix, e.g. "AppUsers/foo"</returns>
        public static string UserIdWithSuffix<TUser>(string suffix, IDocumentStore db)
        {
            return CollectionNameWithSeparator<TUser>(db) + suffix;
        }

        /// <summary>
        /// Creates the ID for the role with the specified name.
        /// </summary>
        /// <typeparam name="TRole">The type of role.</typeparam>
        /// <param name="roleName">The name of the role.</param>
        /// <param name="db">The Raven database. Used for finding the collection name for <typeparamref name="TRole"/>s and the identity parts separator.</param>
        /// <returns>An ID for the role with the specified name.</returns>
        public static string RoleIdFor<TRole>(string roleName, IDocumentStore db)
            where TRole : IdentityRole
        {
            var roleNameLowered = roleName.ToLowerInvariant();
            return CollectionNameWithSeparator<TRole>(db) + roleNameLowered;
        }
    }
}
